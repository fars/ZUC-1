#include "ZUC.h"
#include "EIA3.h"

#include <stdio.h>
#include <string.h>

void TestLittleEndian()
{
	u32 n = 0;
	u8 i = 0;
	unsigned char pData[4] = {0};

	/*First display*/
	n = 1;
	memcpy(pData, &n, 4);
	
	printf("Data in memory:\t0x");
	for (i=0; i<4; i++)
	{
		printf("%x", pData[i]);
	}
	printf("\n");
	printf("Data in CPU:\t0x%x\n", n);

	/*Second display*/
	n = (n << 1);
	memcpy(pData, &n, 4);
	
	printf("Data in memory:\t0x");
	for (i=0; i<4; i++)
	{
		printf("%x", pData[i]);
	}
	printf("\n");
	printf("Data in CPU:\t0x%x\n", n);
}

void TestZUC()
{
	u8 key[16] = {0x3d, 0x4c, 0x4b, 0xe9, 0x6a, 0x82, 0xfd, 0xae, 0xb5, 0x8f, 0x64, 0x1d, 0xb1, 0x7b, 0x45, 0x5b};
	u8 iv[16] = {0x84, 0x31, 0x9a, 0xa8, 0xde, 0x69, 0x15, 0xca, 0x1f, 0x6b, 0xda, 0x6b, 0xfb, 0xd8, 0xc7, 0x66};
	
	u32 pKeyStream[2] = {0};
	u32 KeyStreamLen = sizeof(pKeyStream) / sizeof(pKeyStream[0]);
	u32 i;

	Initialization(key, iv);
	GenerateKeyStream(pKeyStream, KeyStreamLen);

	for (i=0; i<KeyStreamLen; i++)
	{
		printf("z%d:\t0x%08x\n", i, pKeyStream[i]);
	}
}

void TestEIA3()
{
	u8 IK[16] = {0xc9, 0xe6, 0xce, 0xc4, 0x60, 0x7c, 0x72, 0xdb, 0x00, 0x0a, 0xef, 0xa8, 0x83, 0x85, 0xab, 0x0a};
	u8 COUNT[4] = {0xa9, 0x40, 0x59, 0xda};
	u8 BEARER = 0x0a, DIRECTION = 1;

	u8 M[73] = {0x98, 0x3b, 0x41, 0xd4, 0x7d, 0x78, 0x0c, 0x9e, 0x1a, 0xd1, 0x1d, 0x7e, 0xb7, 0x03, 0x91, 0xb1, 0xde, 0x0b, 0x35, 0xda, 0x2d, 0xc6, 0x2f, 0x83, 0xe7, 0xb7, 0x8d, 0x63, 0x06, 0xca, 0x0e, 0xa0, 0x7e, 0x94, 0x1b, 0x7b, 0xe9, 0x13, 0x48, 0xf9, 0xfc, 0xb1, 0x70, 0xe2, 0x21, 0x7f, 0xec, 0xd9, 0x7f, 0x9f, 0x68, 0xad, 0xb1, 0x6e, 0x5d, 0x7d, 0x21, 0xe5, 0x69, 0xd2, 0x80, 0xed, 0x77, 0x5c, 0xeb, 0xde, 0x3f, 0x40, 0x93, 0xc5, 0x38, 0x81, 0x00};
	u32 LENGTH = 577;
	
	u32 MAC;

	EIA3_Init(IK, COUNT, BEARER, DIRECTION);
	EIA3_Update(M, LENGTH);
	MAC = EIA3_Final();
	printf("MAC:\t0x%08x\n", MAC);

	EIA3_Init(IK, COUNT, BEARER, DIRECTION);
	EIA3_Update(M, LENGTH-73);
	EIA3_Update(M+(LENGTH-73)/8, 24);
	EIA3_Update(M+(LENGTH-49)/8, 49);
	MAC = EIA3_Final();
	printf("MAC:\t0x%08x\n", MAC);

	EIA3_Init(IK, COUNT, BEARER, DIRECTION);
	EIA3_Update(M, LENGTH-49);
	EIA3_Update(M+(LENGTH-49)/8, 49);
	MAC = EIA3_Final();
	printf("MAC:\t0x%08x\n", MAC);

	EIA3_Init(IK, COUNT, BEARER, DIRECTION);
	EIA3_Update(M, LENGTH);
	MAC = EIA3_Final();
	printf("MAC:\t0x%08x\n", MAC);
}

void TestEIA3_Spec()
{
	u8 IK[16] = {0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01};
	u8 COUNT[4] = {0x0, 0x0, 0x0, 0x01};
	u8 BEARER = 0x02, DIRECTION = 1;
	u8 M[19] = {0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x30};
	u32 LENGTH = 80;
	u32 MAC = 0;

	EIA3_Init(IK, COUNT, BEARER, DIRECTION);
	EIA3_Update(M, LENGTH);
	MAC = EIA3_Final();
	printf("MAC:\t0x%08x\n", MAC);

	memcpy(IK, "\x20\x14\x20\x15\x01\x15\xA4\xC7\x69\x51\x02\x41\x02\x96\x7C\x4A", 16);
	memcpy(COUNT, "\x20\x14\x20\x15", 4);
	BEARER = 0x02;
	DIRECTION = 1;
	memcpy(M, "\x31\x32\x33\x34\x35\x36\x37\x38\x39\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39", 19);
	LENGTH = 19*8;
	MAC = 0;

	EIA3_Init(IK, COUNT, BEARER, DIRECTION);
	EIA3_Update(M, LENGTH);
	MAC = EIA3_Final();
	printf("MAC:\t0x%08x\n", MAC);
}

int main()
{
	TestZUC();
	TestEIA3();
	TestEIA3_Spec();
	TestLittleEndian();
	return 0;
}
